
### these are the filepaths used in the pipeline

modelpath: pilot_data/Human-GEM11.xml
# must be a valid cobrapy model (either .xml, .json, or .mat)
expressionfile: pilot_data/gene_IDs_meanvalues.csv
# must be a csv file with gene identifiers in one column and gene expression data in other columns
output_path: pilot_data_results
# path to a folder in which the output files will be saved. If the folder does not exist, it will be created


### these parameters are for the gene expression file

reaction_scores: false
# set this to true if the expressionfile already contains reaction identifiers instead of gene identifiers.
# If true, the conversion of gene expression to reaction weights will be skipped, and the provided scores will be mapped directly on the reactions.

gene_ID_column: ID
# name of the column containing gene IDs
gene_expression_columns:
# names of the columns containing gene expression data
# column names must be separated by commas (example: condition1,condition2,condition3)
# if empty, all columns (except the gene_ID_column) will be used
duplicates: remove
# how to deal with genes for which several values are present in the expression file, in case these values have conflicting information
# possible methods: "remove", "min", "max", "mean", "median"
gpr_parameters:
  # parameters for the gene-protein-reaction rules
  qualitative: true
  # if true, the gene expression will be converted to reaction weights -1/0/1
  # if false, the expression will directly be mapped to the reactions
  percentile: 0.25
  # the percentile cutoff for low/high gene expression (this is only used if qualitative: true)
  # example: with 0.25, the genes with the lowest 25% expression are converted to -1, and the highest 25% expression to 1


### these parameters are for additional constraints on the metabolic model

force_flux_bounds:
  MAR09931: 1, 1000
#  BIOMASS_reaction: 1e-2,1000
# manually define the lower and upper flux bounds for some reactions
# this can also be a text file where each line contains the bounds for one reaction in this type of format: MAR09931,1,1000

force_active_reactions:
  examplereaction
# manually define reactions that must carry flux, and their minimum flux value
# particularly useful for reversible reactions that could carry flux in either direction
# this can also be a text file containing reaction ideas
fluxvalue: 1e-3
# 'fluxvalue' is the absolute value that the minimal flux should have


### these parameters are for the network enumeration

rxn_enum_iterations: 3
div_enum_iterations: 3

# number of iterations for reaction-enum and diversity-enum (if using the main.py script)


### these parameters are for the network computation in the final step

final_network: union
# defines the method used for computing the network at the end of the workflow
# must be either 'union' or 'minimal'
# 'union' contains all reactions which are active in at least one DEXOM solution
# 'minimal' contains only the reactions which are active in every solution + the reactions necessary to make the network flux-consistent

union_cutoff: 0
# only for the 'union' method
# for a given reaction, if the number of solutions in which it is active <= union_cutoff, then this reaction is ignored